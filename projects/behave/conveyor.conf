# Conveyor Configuration
# Based on: https:www.hydraulic.dev/blog/13-deploying-apps-with-jcef.html
include required("/stdlib/jdk/17/amazon.conf")

# Java Chrome Embedded Framework (JCEF) Binaries
jcef {
  ver = "132.3.1"
  commit-hash = "g144febe"
  releases = "https://github.com/jcefmaven/jcefmaven/releases/download/"
  cef-commit = "1770317"
  cef-ver = "132.0.6834.83"
  cef-bundle-id = "jcef-"${jcef.cef-commit}"+cef-"${jcef.ver}"+"${jcef.commit-hash}"+chromium-"${jcef.cef-ver}

# https://github.com/jcefmaven/jcefmaven/releases/download/132.3.1/jcef-natives-macosx-arm64-jcef-132.3.1+cef-g144febe+chromium-132.0.6834.83.jar
# https://github.com/jcefmaven/jcefmaven/releases/download/132.3.1/jcef-natives-macosx-amd64-jcef-1770317+cef-132.3.1+g144febe+chromium-132.0.6834.83.jar

  windows.amd64 = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-windows-amd64-"${jcef.cef-bundle-id}".jar!/jcef-natives-windows-amd64-"${jcef.cef-bundle-id}".tar.gz"
  mac.amd64   = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-macosx-amd64-"${jcef.cef-bundle-id}".jar!/jcef-natives-macosx-amd64-"${jcef.cef-bundle-id}".tar.gz"
  mac.aarch64 = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-macosx-arm64-"${jcef.cef-bundle-id}".jar!/jcef-natives-macosx-arm64-"${jcef.cef-bundle-id}".tar.gz"
  linux.amd64.glibc = "zip:"${jcef.releases}${jcef.ver}"/jcef-natives-linux-amd64-"${jcef.cef-bundle-id}".jar!/jcef-natives-linux-amd64-"${jcef.cef-bundle-id}".tar.gz"
}

# Add the latest Java 17 JDK distributed by Amazon Coretto.

app {
  # Windows gets square icons, macOS and Linux icons with rounded corners.
  version = 7.1.0
  icons = {
    label = "Behave7"
  }
  # url-schemes = [ bp ]
  file-associations = [ .bp7 ]

  rdns-name = org.firelab.behave7
  vcs-url = github.com/firelab/behave-app

  # Add some app JARs to the classpath/modulepath, taken from build/libs relative to the config file.
  inputs += "target/behave7.jar"

  machines = [windows.amd64, mac.amd64, mac.aarch64, linux.amd64.glibc]

  jvm {
    # Set the main class name.
    gui = behave.core

    options += "--add-exports=java.base/java.lang=ALL-UNNAMED"
    options += "--add-exports=java.desktop/sun.java2d=ALL-UNNAMED"
    options += "--add-exports=java.desktop/sun.awt=ALL-UNNAMED"
    options += "--add-exports=java.desktop/sun.lwawt=ALL-UNNAMED"
    options += "--add-exports=java.desktop/sun.lwawt.macosx=ALL-UNNAMED"
    options += "--add-opens=java.desktop/sun.awt=ALL-UNNAMED"
    options += "--add-opens=java.desktop/sun.lwawt=ALL-UNNAMED"
    options += "--add-opens=java.desktop/sun.lwawt.macosx=ALL-UNNAMED"
    options += -Xss4M
    options += -Xmx1024m

    # Args that are always passed.
    # constant-app-arguments = [ --app-version, ${app.version} ]

    # Add or remove modules from jlink 
    modules += java.desktop
    modules += java.net.http
    modules += jdk.net
    modules += jdk.unsupported
    modules += java.sql
    modules += java.sql.rowset
  }

  # JCEF expects install.lock to exist which isn't in the tarball, otherwise it tries to delete bits of the app!
  windows {
    amd64.inputs += ${jcef.windows.amd64} -> jcef

    inputs += {
      content = "."
      to = jcef/install.lock
    }

    signing-key {
      digi-cert-one {
        api-key = ${env.SM_API_KEY}
        auth-certificate = ${env.SM_CLIENT_CERT_FILE}
        password = ${env.SM_CLIENT_CERT_PASSWORD}
      }
    }
    signing-key-alias = ${env.SM_KEYPAIR}
  }
  
  linux {
    amd64.glibc.inputs += ${jcef.linux.amd64.glibc} -> jcef

    inputs += {
      content = "."
      to = jcef/install.lock
    }
  }

  mac {
    amd64.bundle-extras += {
      from = ${jcef.mac.amd64}
      to = Frameworks
    }
    aarch64.bundle-extras += {
      from = ${jcef.mac.aarch64}
      to = Frameworks
    }

    bundle-extras += {
      content = "."
      to = Frameworks/install.lock
    }

    # These keys are used by Electron and can also benefit JCEF apps.
    info-plist {
      NSSupportsAutomaticGraphicsSwitching = true
      NSRequiresAquaSystemAppearance = false
      NSHighResolutionCapable = true
      NSQuitAlwaysKeepsWindows = false

      LSEnvironment {
        MallocNanoZone = "0"
      }
      NSAppTransportSecurity {
        NSAllowsArbitraryLoads = true
      }
    }
  }
}

conveyor.compatibility-level = 17