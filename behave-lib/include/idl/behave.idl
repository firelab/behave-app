interface DoublePtr {};

interface BoolVector {
  void BoolVector();
  void BoolVector(long size);
  void resize(long size);
  boolean get(long i);
  void set(long i, boolean val);
  long size();
};

interface CharVector {
  void CharVector();
  void CharVector(long size);
  void resize(long size);
  byte get(long i);
  void set(long i, byte val);
  long size();
};

interface IntVector {
  void IntVector();
  void IntVector(long size);
  void resize(long size);
  long get(long i);
  void set(long i, long val);
  long size();
};

interface DoubleVector {
  void DoubleVector();
  void DoubleVector(long size);
  void resize(long size);
  double get(long i);
  void set(long i, double val);
  long size();
};

interface SpeciesMasterTableRecordVector {
  void SpeciesMasterTableRecordVector();
  void SpeciesMasterTableRecordVector(long size);
  void resize(long size);
  SpeciesMasterTableRecord get(long i);
  void set(long i, SpeciesMasterTableRecord val);
  long size();
};

enum AreaUnits_AreaUnitsEnum {
  "AreaUnits::SquareFeet",
  "AreaUnits::Acres",
  "AreaUnits::Hectares",
  "AreaUnits::SquareMeters",
  "AreaUnits::SquareMiles",
  "AreaUnits::SquareKilometers"
};

interface AreaUnits {
  static double toBaseUnits(double value, AreaUnits_AreaUnitsEnum units);
  static double fromBaseUnits(double value, AreaUnits_AreaUnitsEnum units);
};

enum BasalAreaUnits_BasalAreaUnitsEnum {
  "BasalAreaUnits::SquareFeetPerAcre",
  "BasalAreaUnits::SquareMetersPerHectare"
};

interface BasalAreaUnits {
  static double toBaseUnits(double value, BasalAreaUnits_BasalAreaUnitsEnum units);
  static double fromBaseUnits(double value, BasalAreaUnits_BasalAreaUnitsEnum units);
};

enum FractionUnits_FractionUnitsEnum {
  "FractionUnits::Fraction",
  "FractionUnits::Percent"
};

interface FractionUnits {
  static double toBaseUnits(double value, FractionUnits_FractionUnitsEnum units);
  static double fromBaseUnits(double value, FractionUnits_FractionUnitsEnum units);
};

enum LengthUnits_LengthUnitsEnum {
  "LengthUnits::Feet",
  "LengthUnits::Inches",
  "LengthUnits::Millimeters",
  "LengthUnits::Centimeters",
  "LengthUnits::Meters",
  "LengthUnits::Chains",
  "LengthUnits::Miles",
  "LengthUnits::Kilometers"
};

interface LengthUnits {
  static double toBaseUnits(double value, LengthUnits_LengthUnitsEnum units);
  static double fromBaseUnits(double value, LengthUnits_LengthUnitsEnum units);
};

enum LoadingUnits_LoadingUnitsEnum {
  "LoadingUnits::PoundsPerSquareFoot",
  "LoadingUnits::TonsPerAcre",
  "LoadingUnits::TonnesPerHectare",
  "LoadingUnits::KilogramsPerSquareMeter"
};

interface LoadingUnits {
  static double toBaseUnits(double value, LoadingUnits_LoadingUnitsEnum units);
  static double fromBaseUnits(double value, LoadingUnits_LoadingUnitsEnum units);
};

enum SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum {
  "SurfaceAreaToVolumeUnits::SquareFeetOverCubicFeet",
  "SurfaceAreaToVolumeUnits::SquareMetersOverCubicMeters",
  "SurfaceAreaToVolumeUnits::SquareInchesOverCubicInches",
  "SurfaceAreaToVolumeUnits::SquareCentimetersOverCubicCentimeters"
};

interface SurfaceAreaToVolumeUnits {
  static double toBaseUnits(double value, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum units);
  static double fromBaseUnits(double value, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum units);
};

enum SpeedUnits_SpeedUnitsEnum {
  "SpeedUnits::FeetPerMinute",
  "SpeedUnits::ChainsPerHour",
  "SpeedUnits::MetersPerSecond",
  "SpeedUnits::MetersPerMinute",
  "SpeedUnits::MilesPerHour",
  "SpeedUnits::KilometersPerHour"
};

interface SpeedUnits {
  static double toBaseUnits(double value, SpeedUnits_SpeedUnitsEnum units);
  static double fromBaseUnits(double value, SpeedUnits_SpeedUnitsEnum units);
};

enum PressureUnits_PressureUnitsEnum {
  "PressureUnits::Pascal",
  "PressureUnits::HectoPascal",
  "PressureUnits::KiloPascal",
  "PressureUnits::MegaPascal",
  "PressureUnits::GigaPascal",
  "PressureUnits::Bar",
  "PressureUnits::Atmosphere",
  "PressureUnits::TechnicalAtmosphere",
  "PressureUnits::PoundPerSquareInch"
};

interface PressureUnits {
  static double toBaseUnits(double value, PressureUnits_PressureUnitsEnum units);
  static double fromBaseUnits(double value, PressureUnits_PressureUnitsEnum units);
};

enum SlopeUnits_SlopeUnitsEnum {
  "SlopeUnits::Degrees",
  "SlopeUnits::Percent"
};

interface SlopeUnits {
  static double toBaseUnits(double value, SlopeUnits_SlopeUnitsEnum units);
  static double fromBaseUnits(double value, SlopeUnits_SlopeUnitsEnum units);
};

enum DensityUnits_DensityUnitsEnum {
  "DensityUnits::PoundsPerCubicFoot",
  "DensityUnits::KilogramsPerCubicMeter"
};

interface DensityUnits {
  static double toBaseUnits(double value, DensityUnits_DensityUnitsEnum units);
  static double fromBaseUnits(double value, DensityUnits_DensityUnitsEnum units);
};

enum HeatOfCombustionUnits_HeatOfCombustionUnitsEnum {
  "HeatOfCombustionUnits::BtusPerPound",
  "HeatOfCombustionUnits::KilojoulesPerKilogram"
};

interface HeatOfCombustionUnits {
  static double toBaseUnits(double value, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum units);
  static double fromBaseUnits(double value, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum units);
};

enum HeatSinkUnits_HeatSinkUnitsEnum {
  "HeatSinkUnits::BtusPerCubicFoot",
  "HeatSinkUnits::KilojoulesPerCubicMeter"
};

interface HeatSinkUnits {
  static double toBaseUnits(double value, HeatSinkUnits_HeatSinkUnitsEnum units);
  static double fromBaseUnits(double value, HeatSinkUnits_HeatSinkUnitsEnum units);
};

enum HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum {
  "HeatPerUnitAreaUnits::BtusPerSquareFoot",
  "HeatPerUnitAreaUnits::KilojoulesPerSquareMeter",
  "HeatPerUnitAreaUnits::KilowattSecondsPerSquareMeter"
};

interface HeatPerUnitAreaUnits {
  static double toBaseUnits(double value, HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum units);
  static double fromBaseUnits(double value, HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum units);
};

enum HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum {
  "HeatSourceAndReactionIntensityUnits::BtusPerSquareFootPerMinute",
  "HeatSourceAndReactionIntensityUnits::BtusPerSquareFootPerSecond",
  "HeatSourceAndReactionIntensityUnits::KilojoulesPerSquareMeterPerSecond",
  "HeatSourceAndReactionIntensityUnits::KilojoulesPerSquareMeterPerMinute",
  "HeatSourceAndReactionIntensityUnits::KilowattsPerSquareMeter"
};

interface HeatSourceAndReactionIntensityUnits {
  static double toBaseUnits(double value, HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum units);
  static double fromBaseUnits(double value, HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum units);
};

enum FirelineIntensityUnits_FirelineIntensityUnitsEnum {
  "FirelineIntensityUnits::BtusPerFootPerSecond",
  "FirelineIntensityUnits::BtusPerFootPerMinute",
  "FirelineIntensityUnits::KilojoulesPerMeterPerSecond",
  "FirelineIntensityUnits::KilojoulesPerMeterPerMinute",
  "FirelineIntensityUnits::KilowattsPerMeter"
};

interface FirelineIntensityUnits {
  static double toBaseUnits(double value, FirelineIntensityUnits_FirelineIntensityUnitsEnum units);
  static double fromBaseUnits(double value, FirelineIntensityUnits_FirelineIntensityUnitsEnum units);
};

enum TemperatureUnits_TemperatureUnitsEnum {
  "TemperatureUnits::Fahrenheit",
  "TemperatureUnits::Celsius",
  "TemperatureUnits::Kelvin"
};

interface TemperatureUnits {
  static double toBaseUnits(double value, TemperatureUnits_TemperatureUnitsEnum units);
  static double fromBaseUnits(double value, TemperatureUnits_TemperatureUnitsEnum units);
};

enum TimeUnits_TimeUnitsEnum {
  "TimeUnits::Minutes",
  "TimeUnits::Seconds",
  "TimeUnits::Hours"
};

interface TimeUnits {
  static double toBaseUnits(double value, TimeUnits_TimeUnitsEnum units);
  static double fromBaseUnits(double value, TimeUnits_TimeUnitsEnum units);
};

interface FireSize {
  double getBackingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getEccentricity();
  double getEllipticalA(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getEllipticalB(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getEllipticalC(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFireArea(boolean isCrown, AreaUnits_AreaUnitsEnum areaUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFireLength(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFireLengthToWidthRatio();
  double getFirePerimeter(boolean isCrown, LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFlankingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getHeadingToBackingRatio();
  double getMaxFireWidth(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  void calculateFireBasicDimensions(boolean isCrown, double effectiveWindSpeed, SpeedUnits_SpeedUnitsEnum windSpeedRateUnits, double forwardSpreadRate, SpeedUnits_SpeedUnitsEnum spreadRateUnits);
};

enum ContainTactic_ContainTacticEnum {
  "ContainTactic::HeadAttack",
  "ContainTactic::RearAttack"
};

enum ContainStatus_ContainStatusEnum {
  "ContainStatus::Unreported",
  "ContainStatus::Reported",
  "ContainStatus::Attacked",
  "ContainStatus::Contained",
  "ContainStatus::Overrun",
  "ContainStatus::Exhausted",
  "ContainStatus::Overflow",
  "ContainStatus::SizeLimitExceeded",
  "ContainStatus::TimeLimitExceeded"
};

enum ContainFlank_ContainFlankEnum {
  "ContainFlank::LeftFlank",
  "ContainFlank::RightFlank",
  "ContainFlank::BothFlanks",
  "ContainFlank::NeitherFlank"
};

// Adapter to the ContainAdapter
interface SIGContainAdapter {
  void SIGContainAdapter();
  ContainStatus_ContainStatusEnum getContainmentStatus();
  [Value] DoubleVector getFirePerimeterX();
  [Value] DoubleVector getFirePerimeterY();
  [Const] double getAttackDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  double getFinalContainmentArea(AreaUnits_AreaUnitsEnum areaUnits);
  double getFinalCost();
  double getFinalFireLineLength(LengthUnits_LengthUnitsEnum lengthUnits);
  double getFinalFireSize(AreaUnits_AreaUnitsEnum areaUnits);
  double getFinalTimeSinceReport(TimeUnits_TimeUnitsEnum timeUnits);
  double getFinalProductionRate(SpeedUnits_SpeedUnitsEnum speedUnits);
  double getFireBackAtAttack();
  double getFireBackAtReport();
  double getFireHeadAtAttack();
  double getFireHeadAtReport();
  double getFireSizeAtInitialAttack(AreaUnits_AreaUnitsEnum areaUnits);
  double getLengthToWidthRatio();
  double getPerimeterAtContainment(LengthUnits_LengthUnitsEnum lengthUnits);
  double getPerimeterAtInitialAttack(LengthUnits_LengthUnitsEnum lengthUnits);
  double getReportSize(AreaUnits_AreaUnitsEnum areaUnits);
  double getReportRate(SpeedUnits_SpeedUnitsEnum speedUnits);
  long getTactic();
  long getFirePerimeterPointCount();
  long removeAllResourcesWithThisDesc([Const] DOMString desc);
  long removeResourceAt(long index);
  long removeResourceWithThisDesc([Const] DOMString desc);
  void addResource(double arrival, TimeUnits_TimeUnitsEnum arrivalTimeUnit, double duration, TimeUnits_TimeUnitsEnum durationTimeUnit, double productionRate, SpeedUnits_SpeedUnitsEnum productionRateUnits, DOMString description, double baseCost, double hourCost);
  void doContainRun();
  void removeAllResources();
  void setAttackDistance(double attackDistance, LengthUnits_LengthUnitsEnum lengthUnits);
  void setFireStartTime(long fireStartTime);
  void setLwRatio(double lwRatio);
  void setMaxFireSize(long maxFireSize);
  void setMaxFireTime(long maxFireTime);
  void setMaxSteps(long maxSteps);
  void setMinSteps(long minSteps);
  void setReportRate(double reportRate, SpeedUnits_SpeedUnitsEnum speedUnits);
  void setReportSize(double reportSize, AreaUnits_AreaUnitsEnum areaUnits);
  void setRetry(boolean retry);
  void setTactic(ContainTactic_ContainTacticEnum tactic);
};

enum IgnitionFuelBedType_IgnitionFuelBedTypeEnum {
  "IgnitionFuelBedType::PonderosaPineLitter",
  "IgnitionFuelBedType::PunkyWoodRottenChunky",
  "IgnitionFuelBedType::PunkyWoodPowderDeep",
  "IgnitionFuelBedType::PunkWoodPowderShallow",
  "IgnitionFuelBedType::LodgepolePineDuff",
  "IgnitionFuelBedType::DouglasFirDuff",
  "IgnitionFuelBedType::HighAltitudeMixed",
  "IgnitionFuelBedType::PeatMoss"
};

enum LightningCharge_LightningChargeEnum {
  "LightningCharge::Negative",
  "LightningCharge::Positive",
  "LightningCharge::Unknown"
};

interface SIGIgnite {
  void SIGIgnite();
  void initializeMembers();

  IgnitionFuelBedType_IgnitionFuelBedTypeEnum getFuelBedType();
  LightningCharge_LightningChargeEnum getLightningChargeType();
  void calculateFirebrandIgnitionProbability();
  double calculateLightningIgnitionProbability(FractionUnits_FractionUnitsEnum desiredUnits);
  void setAirTemperature(double airTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnites);
  void setDuffDepth(double duffDepth, LengthUnits_LengthUnitsEnum lengthUnits);
  void setIgnitionFuelBedType(IgnitionFuelBedType_IgnitionFuelBedTypeEnum fuelBedType_);
  void setLightningChargeType(LightningCharge_LightningChargeEnum lightningChargeType);
  void setMoistureHundredHour(double moistureHundredHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureOneHour(double moistureOneHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setSunShade(double sunShade, FractionUnits_FractionUnitsEnum sunShadeUnits);
  void updateIgniteInputs(double moistureOneHour, double moistureHundredHour, FractionUnits_FractionUnitsEnum moistureUnits, double airTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnits, double sunShade, FractionUnits_FractionUnitsEnum sunShadeUnits, IgnitionFuelBedType_IgnitionFuelBedTypeEnum fuelBedType, double duffDepth, LengthUnits_LengthUnitsEnum duffDepthUnits, LightningCharge_LightningChargeEnum lightningChargeType);

  double getAirTemperature(TemperatureUnits_TemperatureUnitsEnum desiredUnits);
  double getDuffDepth(LengthUnits_LengthUnitsEnum desiredUnits);
  double getFirebrandIgnitionProbability(FractionUnits_FractionUnitsEnum desiredUnits);
  double getFuelTemperature(TemperatureUnits_TemperatureUnitsEnum desiredUnits);
  double getMoistureHundredHour(FractionUnits_FractionUnitsEnum desiredUnits);
  double getMoistureOneHour(FractionUnits_FractionUnitsEnum desiredUnits);
  double getSunShade(FractionUnits_FractionUnitsEnum desiredUnits);
  boolean isFuelDepthNeeded();
};

// moisture scenarioes

interface SIGMoistureScenarios {
  void SIGMoistureScenarios();
  boolean getIsMoistureScenarioDefinedByIndex(long index);
  boolean getIsMoistureScenarioDefinedByName([Const] DOMString name);
  double getMoistureScenarioHundredHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioHundredHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioLiveHerbaceousByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioLiveHerbaceousByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioLiveWoodyByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioLiveWoodyByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioOneHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioOneHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioTenHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  double getMoistureScenarioTenHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  long getMoistureScenarioIndexByName([Const] DOMString name);
  long getNumberOfMoistureScenarios();
  DOMString getMoistureScenarioDescriptionByIndex(long index);
  DOMString getMoistureScenarioDescriptionByName([Const] DOMString name);
  DOMString getMoistureScenarioNameByIndex(long index);
};

// Spot

enum SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum {
  "SpotDownWindCanopyMode::CLOSED",
  "SpotDownWindCanopyMode::OPEN",
};

enum SpotTreeSpecies_SpotTreeSpeciesEnum {
  "SpotTreeSpecies::ENGELMANN_SPRUCE",
  "SpotTreeSpecies::DOUGLAS_FIR",
  "SpotTreeSpecies::SUBALPINE_FIR",
  "SpotTreeSpecies::WESTERN_HEMLOCK",
  "SpotTreeSpecies::PONDEROSA_PINE",
  "SpotTreeSpecies::LODGEPOLE_PINE",
  "SpotTreeSpecies::WESTERN_WHITE_PINE",
  "SpotTreeSpecies::GRAND_FIR",
  "SpotTreeSpecies::BALSAM_FIR",
  "SpotTreeSpecies::SLASH_PINE",
  "SpotTreeSpecies::LONGLEAF_PINE",
  "SpotTreeSpecies::POND_PINE",
  "SpotTreeSpecies::SHORTLEAF_PINE",
  "SpotTreeSpecies::LOBLOLLY_PINE"
};

enum SpotFireLocation_SpotFireLocationEnum {
  "SpotFireLocation::MIDSLOPE_WINDWARD",
  "SpotFireLocation::VALLEY_BOTTOM",
  "SpotFireLocation::MIDSLOPE_LEEWARD",
  "SpotFireLocation::RIDGE_TOP"
};

interface SIGSpot {
  void SIGSpot();
  SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum getDownwindCanopyMode();
  SpotFireLocation_SpotFireLocationEnum getLocation();
  SpotTreeSpecies_SpotTreeSpeciesEnum getTreeSpecies();
  double getBurningPileFlameHeight(LengthUnits_LengthUnitsEnum flameHeightUnits);
  double getCoverHeightUsedForBurningPile(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getCoverHeightUsedForSurfaceFire(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getCoverHeightUsedForTorchingTrees(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getDBH(LengthUnits_LengthUnitsEnum DBHUnits);
  double getDownwindCoverHeight(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getFlameDurationForTorchingTrees(TimeUnits_TimeUnitsEnum durationUnits);
  double getFlameHeightForTorchingTrees(LengthUnits_LengthUnitsEnum flameHeightUnits);
  double getFlameRatioForTorchingTrees();
  double getMaxFirebrandHeightFromBurningPile(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFirebrandHeightFromSurfaceFire(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFirebrandHeightFromTorchingTrees(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFlatTerrainSpottingDistanceFromBurningPile(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxFlatTerrainSpottingDistanceFromSurfaceFire(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxFlatTerrainSpottingDistanceFromTorchingTrees(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromBurningPile(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromSurfaceFire(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromTorchingTrees(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromActiveCrown(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getRidgeToValleyDistance(LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  double getRidgeToValleyElevation(LengthUnits_LengthUnitsEnum elevationUnits);
  double getSurfaceFlameLength(LengthUnits_LengthUnitsEnum surfaceFlameLengthUnits);
  double getTreeHeight(LengthUnits_LengthUnitsEnum treeHeightUnits);
  double getWindSpeedAtTwentyFeet(SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  long getTorchingTrees();
  void calculateAll();
  void calculateSpottingDistanceFromBurningPile();
  void calculateSpottingDistanceFromSurfaceFire();
  void calculateSpottingDistanceFromTorchingTrees();
  void initializeMembers();
  void setActiveCrownFlameLength(double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void setBurningPileFlameHeight(double buringPileflameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits);
  void setDBH(double DBH, LengthUnits_LengthUnitsEnum DBHUnits);
  void setDownwindCanopyMode(SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum downwindCanopyMode);
  void setDownwindCoverHeight(double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits);
  void setFireType (FireType_FireTypeEnum fireType);
  void setFlameLength(double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void setFirelineIntensity(double firelineIntensity, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setLocation(SpotFireLocation_SpotFireLocationEnum location);
  void setRidgeToValleyDistance(double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  void setRidgeToValleyElevation(double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits);
  void setTorchingTrees(long torchingTrees);
  void setTreeHeight(double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits);
  void setTreeSpecies(SpotTreeSpecies_SpotTreeSpeciesEnum treeSpecies);
  void setWindSpeedAtTwentyFeet(double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void setWindSpeed(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void setWindSpeedAndWindHeightInputMode(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setWindHeightInputMode(WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void updateSpotInputsForBurningPile(SpotFireLocation_SpotFireLocationEnum location, double ridgeToValleyDistance,
                                      LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits,
                                      double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits,
                                      double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits,
                                      SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum downwindCanopyMode,
                                      double buringPileFlameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits,
                                      double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void updateSpotInputsForSurfaceFire(SpotFireLocation_SpotFireLocationEnum location, double ridgeToValleyDistance,
                                      LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits,
                                      double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits,
                                      double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits,
                                      SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum downwindCanopyMode,
                                      double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits,
                                      double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void updateSpotInputsForTorchingTrees(SpotFireLocation_SpotFireLocationEnum location, double ridgeToValleyDistance,
                                        LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits,
                                        double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits,
                                        double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits,
                                        SpotDownWindCanopyMode_SpotDownWindCanopyModeEnum downwindCanopyMode,
                                        long torchingTrees, double DBH, LengthUnits_LengthUnitsEnum DBHUnits,
                                        double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits,
                                        SpotTreeSpecies_SpotTreeSpeciesEnum treeSpecies, double windSpeedAtTwentyFeet,
                                        SpeedUnits_SpeedUnitsEnum windSpeedUnits);
};

/* Fuel Models */

enum FuelLifeState_FuelLifeStateEnum {
  "FuelLifeState::Dead",
  "FuelLifeState::Live"
};

enum FuelConstantsEnum_FuelConstantsEnum {
  "FuelConstants::MaxLifeStates",
  "FuelConstants::MaxLiveSizeClasses",
  "FuelConstants::MaxDeadSizeClasses",
  "FuelConstants::MaxParticles",
  "FuelConstants::MaxSavrSizeClasses",
  "FuelConstants::MaxFuelModels"
};

interface SIGFuelModels {
  void SIGFuelModels();
  [Operator="=", Ref] SIGFuelModels equal([Const, Ref] SIGFuelModels rhs);
  void SIGFuelModels([Const, Ref] SIGFuelModels rhs);
  boolean clearCustomFuelModel(long fuelModelNumber);
  boolean getIsDynamic(long fuelModelNumber);
  boolean isAllFuelLoadZero(long fuelModelNumber);
  boolean isFuelModelDefined(long fuelModelNumber);
  boolean isFuelModelReserved(long fuelModelNumber);
  boolean setCustomFuelModel(long fuelModelNumber, DOMString code, DOMString name, double fuelBedDepth, LengthUnits_LengthUnitsEnum lengthUnits, double moistureOfExtinctionDead, FractionUnits_FractionUnitsEnum moistureUnits, double heatOfCombustionDead, double heatOfCombustionLive, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits, double fuelLoadOneHour, double fuelLoadTenHour, double fuelLoadHundredHour, double fuelLoadLiveHerbaceous, double fuelLoadLiveWoody, LoadingUnits_LoadingUnitsEnum loadingUnits, double savrOneHour, double savrLiveHerbaceous, double savrLiveWoody, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits, boolean isDynamic);
  DOMString getFuelCode(long fuelModelNumber);
  DOMString getFuelName(long fuelModelNumber);
  double getFuelLoadHundredHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  double getFuelLoadLiveHerbaceous(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  double getFuelLoadLiveWoody(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  double getFuelLoadOneHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  double getFuelLoadTenHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  double getFuelbedDepth(long fuelModelNumber, LengthUnits_LengthUnitsEnum lengthUnits);
  double getHeatOfCombustionDead(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  double getMoistureOfExtinctionDead(long fuelModelNumber, FractionUnits_FractionUnitsEnum moistureUnits);
  double getSavrLiveHerbaceous(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  double getSavrLiveWoody(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  double getSavrOneHour(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  double getHeatOfCombustionLive(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
};

/* Surface */

enum AspenFireSeverity_AspenFireSeverityEnum {
  "AspenFireSeverity::Low",
  "AspenFireSeverity::Moderate"
};

enum ChaparralFuelType_ChaparralFuelTypeEnum {
  "ChaparralFuelType::NotSet",
  "ChaparralFuelType::Chamise",
  "ChaparralFuelType::MixedBrush",
};

enum ChaparralFuelLoadInputMode_ChaparralFuelInputLoadModeEnum {
  "ChaparralFuelLoadInputMode::DirectFuelLoad",
  "ChaparralFuelLoadInputMode::FuelLoadFromDepthAndChaparralType"
};

enum MoistureInputMode_MoistureInputModeEnum {
  "MoistureInputMode::BySizeClass",
  "MoistureInputMode::AllAggregate",
  "MoistureInputMode::DeadAggregateAndLiveSizeClass",
  "MoistureInputMode::LiveAggregateAndDeadSizeClass",
  "MoistureInputMode::MoistureScenario"
};

enum MoistureClassInput_MoistureClassInputEnum {
  "MoistureClassInput::OneHour",
  "MoistureClassInput::TenHour",
  "MoistureClassInput::HundredHour",
  "MoistureClassInput::LiveHerbaceous",
  "MoistureClassInput::LiveWoody",
  "MoistureClassInput::DeadAggregate",
  "MoistureClassInput::LiveAggregate"
};

enum SurfaceFireSpreadDirectionMode_SurfaceFireSpreadDirectionModeEnum {
  "SurfaceFireSpreadDirectionMode::FromIgnitionPoint",
  "SurfaceFireSpreadDirectionMode::FromPerimeter"
};

enum TwoFuelModelsMethod_TwoFuelModelsMethodEnum {
  "TwoFuelModelsMethod::NoMethod",
  "TwoFuelModelsMethod::Arithmetic",
  "TwoFuelModelsMethod::Harmonic",
  "TwoFuelModelsMethod::TwoDimensional"
};

enum WindAdjustmentFactorShelterMethod_WindAdjustmentFactorShelterMethodEnum {
  "WindAdjustmentFactorShelterMethod::Unsheltered",
  "WindAdjustmentFactorShelterMethod::Sheltered"
};

enum WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum {
  "WindAdjustmentFactorCalculationMethod::UserInput",
  "WindAdjustmentFactorCalculationMethod::UseCrownRatio",
  "WindAdjustmentFactorCalculationMethod::DontUseCrownRatio"
};

enum WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum {
  "WindAndSpreadOrientationMode::RelativeToUpslope",
  "WindAndSpreadOrientationMode::RelativeToNorth"
};

enum WindHeightInputMode_WindHeightInputModeEnum {
  "WindHeightInputMode::DirectMidflame",
  "WindHeightInputMode::TwentyFoot",
  "WindHeightInputMode::TenMeter"
};

enum WindUpslopeAlignmentMode {
  "WindUpslopeAlignmentMode::NotAligned",
  "WindUpslopeAlignmentMode::Aligned"
};

enum SurfaceRunInDirectionOf {
  "SurfaceRunInDirectionOf::MaxSpread",
  "SurfaceRunInDirectionOf::DirectionOfInterest",
  "SurfaceRunInDirectionOf::HeadingBackingFlanking"
};


interface SIGSurface {
  void SIGSurface([Ref] SIGFuelModels fuelModels);

  AspenFireSeverity_AspenFireSeverityEnum getAspenFireSeverity();
  ChaparralFuelType_ChaparralFuelTypeEnum getChaparralFuelType();
  MoistureInputMode_MoistureInputModeEnum getMoistureInputMode();
  WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum getWindAdjustmentFactorCalculationMethod();
  WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum getWindAndSpreadOrientationMode();
  WindHeightInputMode_WindHeightInputModeEnum getWindHeightInputMode();
  WindUpslopeAlignmentMode getWindUpslopeAlignmentMode();
  SurfaceRunInDirectionOf getSurfaceRunInDirectionOf();
  boolean getIsMoistureScenarioDefinedByIndex(long index);
  boolean getIsMoistureScenarioDefinedByName([Const] DOMString name);
  boolean getIsUsingChaparral();
  boolean getIsUsingPalmettoGallberry();
  boolean getIsUsingWesternAspen();
  boolean isAllFuelLoadZero(long fuelModelNumber);
  boolean isFuelDynamic(long fuelModelNumber);
  boolean isFuelModelDefined(long fuelModelNumber);
  boolean isFuelModelReserved(long fuelModelNumber);
  boolean isMoistureClassInputNeededForCurrentFuelModel(MoistureClassInput_MoistureClassInputEnum moistureClass);
  boolean isUsingTwoFuelModels();
  boolean setCurrentMoistureScenarioByIndex(long moistureScenarioIndex);
  boolean setCurrentMoistureScenarioByName([Const] DOMString moistureScenarioName);
  double calculateFlameLength(double firelineIntensity, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits, LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getAgeOfRough();
  [Const] double getAspect();
  [Const] double getAspenCuringLevel(FractionUnits_FractionUnitsEnum curingLevelUnits);
  [Const] double getAspenDBH(LengthUnits_LengthUnitsEnum dbhUnits);
  [Const] double getAspenLoadDeadOneHour(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getAspenLoadDeadTenHour(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getAspenLoadLiveHerbaceous(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getAspenLoadLiveWoody(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getAspenSavrDeadOneHour(SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getAspenSavrDeadTenHour(SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getAspenSavrLiveHerbaceous(SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getAspenSavrLiveWoody(SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getBackingFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getBackingFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getBackingSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getBackingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getBulkDensity(DensityUnits_DensityUnitsEnum densityUnits);
  [Const] double getCanopyCover(FractionUnits_FractionUnitsEnum coverUnits);
  [Const] double getCanopyHeight(LengthUnits_LengthUnitsEnum canopyHeightUnits);
  [Const] double getChaparralAge(TimeUnits_TimeUnitsEnum ageUnits);
  [Const] double getChaparralDaysSinceMayFirst();
  [Const] double getChaparralDeadFuelFraction();
  [Const] double getChaparralDeadMoistureOfExtinction(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getChaparralDensity(FuelLifeState_FuelLifeStateEnum lifeState, long sizeClass, DensityUnits_DensityUnitsEnum densityUnits);
  [Const] double getChaparralFuelBedDepth(LengthUnits_LengthUnitsEnum depthUnits);
  [Const] double getChaparralFuelDeadLoadFraction();
  [Const] double getChaparralHeatOfCombustion(FuelLifeState_FuelLifeStateEnum lifeState, long sizeClass, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getChaparralLiveMoistureOfExtinction(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getChaparralLoadDeadHalfInchToLessThanOneInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadDeadLessThanQuarterInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadDeadOneInchToThreeInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadDeadQuarterInchToLessThanHalfInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadLiveHalfInchToLessThanOneInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadLiveLeaves(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadLiveOneInchToThreeInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadLiveQuarterInchToLessThanHalfInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralLoadLiveStemsLessThanQuaterInch(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralMoisture(FuelLifeState_FuelLifeStateEnum lifeState, long sizeClass, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getChaparralTotalDeadFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralTotalFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getChaparralTotalLiveFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getCharacteristicMoistureByLifeState(FuelLifeState_FuelLifeStateEnum lifeState, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getCharacteristicMoistureDead(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getCharacteristicMoistureLive(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getCharacteristicSAVR(SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getCrownRatio(FractionUnits_FractionUnitsEnum crownRatioUnits);
  [Const] double getDirectionOfMaxSpread();
  [Const] double getDirectionOfInterest();
  [Const] double getDirectionOfBacking();
  [Const] double getDirectionOfFlanking();
  [Const] double getElapsedTime(TimeUnits_TimeUnitsEnum timeUnits);
  [Const] double getEllipticalA(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getEllipticalB(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getEllipticalC(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFireLength(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getMaxFireWidth(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFireArea(AreaUnits_AreaUnitsEnum areaUnits);
  [Const] double getFireEccentricity();
  [Const] double getFireLengthToWidthRatio();
  [Const] double getFirePerimeter(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getFirelineIntensityInDirectionOfInterest(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getFlameLengthInDirectionOfInterest(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getFlankingFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getFlankingFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getFlankingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getFlankingSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFuelHeatOfCombustionDead(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getFuelHeatOfCombustionLive(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getFuelLoadHundredHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadLiveHerbaceous(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadLiveWoody(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadOneHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadTenHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelMoistureOfExtinctionDead(long fuelModelNumber, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getFuelSavrLiveHerbaceous(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelSavrLiveWoody(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelSavrOneHour(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelbedDepth(long fuelModelNumber, LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getHeadingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getHeadingToBackingRatio();
  [Const] double getHeatPerUnitArea(HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum heatPerUnitAreaUnits);
  [Const] double getHeatSink(HeatSinkUnits_HeatSinkUnitsEnum heatSinkUnits);
  [Const] double getHeatSource(HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum heatSourceUnits);
  [Const] double getHeightOfUnderstory(LengthUnits_LengthUnitsEnum heightUnits);
  [Const] double getLiveFuelMoistureOfExtinction(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMidflameWindspeed(SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  [Const] double getMoistureDeadAggregateValue(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureHundredHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureLiveAggregateValue(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureLiveHerbaceous(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureLiveWoody(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureOneHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioHundredHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioHundredHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveHerbaceousByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveHerbaceousByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveWoodyByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveWoodyByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioOneHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioOneHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioTenHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioTenHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureTenHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getOverstoryBasalArea(BasalAreaUnits_BasalAreaUnitsEnum basalAreaUnits);
  [Const] double getPalmettoGallberryCoverage(FractionUnits_FractionUnitsEnum coverUnits);
  [Const] double getPalmettoGallberryHeatOfCombustionDead(HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getPalmettoGallberryHeatOfCombustionLive(HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getPalmettoGallberryMoistureOfExtinctionDead(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getPalmettoGallberyDeadFineFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyDeadFoliageLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyDeadMediumFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyFuelBedDepth(LengthUnits_LengthUnitsEnum depthUnits);
  [Const] double getPalmettoGallberyLitterLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyLiveFineFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyLiveFoliageLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getPalmettoGallberyLiveMediumFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getReactionIntensity(HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum reactiontionIntensityUnits);
  [Const] double getResidenceTime(TimeUnits_TimeUnitsEnum timeUnits);
  [Const] double getSlope(SlopeUnits_SlopeUnitsEnum slopeUnits);
  [Const] double getSlopeFactor();
  [Const] double getSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getSpreadDistanceInDirectionOfInterest(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getSpreadRateInDirectionOfInterest(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getSurfaceFireReactionIntensityForLifeState(FuelLifeState_FuelLifeStateEnum lifeState);
  [Const] double getTotalLiveFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getTotalDeadFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getTotalDeadHerbaceousFuelLoad(LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getWindDirection();
  [Const] double getWindSpeed(SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  [Const] long getAspenFuelModelNumber();
  [Const] long getFuelModelNumber();
  [Const] long getMoistureScenarioIndexByName([Const] DOMString name);
  long getNumberOfMoistureScenarios();
  [Const] DOMString getFuelCode(long fuelModelNumber);
  [Const] DOMString getFuelName(long fuelModelNumber);
  [Const] DOMString getMoistureScenarioDescriptionByIndex(long index);
  [Const] DOMString getMoistureScenarioDescriptionByName([Const] DOMString name);
  [Const] DOMString getMoistureScenarioNameByIndex(long index);
  void doSurfaceRun();
  void doSurfaceRunInDirectionOfInterest(double directionOfInterest, SurfaceFireSpreadDirectionMode_SurfaceFireSpreadDirectionModeEnum directionMode);
  void doSurfaceRunInDirectionOfMaxSpread();
  void initializeMembers();
  void setAgeOfRough(double ageOfRough);
  void setAspect(double aspect);
  void setAspenCuringLevel(double aspenCuringLevel, FractionUnits_FractionUnitsEnum curingLevelUnits);
  void setAspenDBH(double dbh, LengthUnits_LengthUnitsEnum dbhUnits);
  void setAspenFireSeverity(AspenFireSeverity_AspenFireSeverityEnum aspenFireSeverity);
  void setAspenFuelModelNumber(long aspenFuelModelNumber);
  void setCanopyCover(double canopyCover, FractionUnits_FractionUnitsEnum coverUnits);
  void setCanopyHeight(double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits);
  void setChaparralFuelBedDepth(double chaparralFuelBedDepth, LengthUnits_LengthUnitsEnum depthUnts);
  void setChaparralFuelDeadLoadFraction(double chaparralFuelDeadLoadFraction);
  void setChaparralFuelLoadInputMode(ChaparralFuelLoadInputMode_ChaparralFuelInputLoadModeEnum fuelLoadInputMode);
  void setChaparralFuelType(ChaparralFuelType_ChaparralFuelTypeEnum chaparralFuelType);
  void setChaparralTotalFuelLoad(double chaparralTotalFuelLoad, LoadingUnits_LoadingUnitsEnum fuelLoadUnits);
  void setCrownRatio(double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void setDirectionOfInterest(double directionOfInterest);
  void setElapsedTime(double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  void setFirstFuelModelNumber(long firstFuelModelNumber);
  void setFuelModels([Ref] SIGFuelModels fuelModels);
  void setHeightOfUnderstory(double heightOfUnderstory, LengthUnits_LengthUnitsEnum heightUnits);
  void setIsUsingChaparral(boolean isUsingChaparral);
  void setIsUsingPalmettoGallberry(boolean isUsingPalmettoGallberry);
  void setIsUsingWesternAspen(boolean isUsingWesternAspen);
  void setMoistureDeadAggregate(double moistureDead, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureHundredHour(double moistureHundredHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureInputMode(MoistureInputMode_MoistureInputModeEnum moistureInputMode);
  void setMoistureLiveAggregate(double moistureLive, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureLiveHerbaceous(double moistureLiveHerbaceous, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureLiveWoody(double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureOneHour(double moistureOneHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureScenarios([Ref] SIGMoistureScenarios moistureScenarios);
  void setMoistureTenHour(double moistureTenHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setOverstoryBasalArea(double overstoryBasalArea, BasalAreaUnits_BasalAreaUnitsEnum basalAreaUnits);
  void setPalmettoCoverage(double palmettoCoverage, FractionUnits_FractionUnitsEnum coverUnits);
  void setSecondFuelModelNumber(long secondFuelModelNumber);
  void setSlope(double slope, SlopeUnits_SlopeUnitsEnum slopeUnits);
  void setSurfaceFireSpreadDirectionMode(SurfaceFireSpreadDirectionMode_SurfaceFireSpreadDirectionModeEnum directionMode);
  void setSurfaceRunInDirectionOf(SurfaceRunInDirectionOf surfaceRunInDirectionOf);
  void setTwoFuelModelsFirstFuelModelCoverage(double firstFuelModelCoverage, FractionUnits_FractionUnitsEnum coverUnits);
  void setTwoFuelModelsMethod(TwoFuelModelsMethod_TwoFuelModelsMethodEnum twoFuelModelsMethod);
  void setUserProvidedWindAdjustmentFactor(double userProvidedWindAdjustmentFactor);
  void setWindAdjustmentFactorCalculationMethod(WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum windAdjustmentFactorCalculationMethod);
  void setWindAndSpreadOrientationMode(WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode);
  void setWindDirection(double windDirection);
  void setWindHeightInputMode(WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setWindSpeed(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void updateSurfaceInputs(long fuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void updateSurfaceInputsForPalmettoGallbery(double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double ageOfRough, double heightOfUnderstory, double palmettoCoverage, double overstoryBasalArea, BasalAreaUnits_BasalAreaUnitsEnum basalAreaUnits, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void updateSurfaceInputsForTwoFuelModels(long firstFuelModelNumber, long secondFuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double firstFuelModelCoverage, FractionUnits_FractionUnitsEnum firstFuelModelCoverageUnits, TwoFuelModelsMethod_TwoFuelModelsMethodEnum twoFuelModelsMethod, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum canopyFractionUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnitso);
  void updateSurfaceInputsForWesternAspen(long aspenFuelModelNumber, double aspenCuringLevel, FractionUnits_FractionUnitsEnum curingLevelUnits, AspenFireSeverity_AspenFireSeverityEnum aspenFireSeverity, double dbh, LengthUnits_LengthUnitsEnum dbhUnits, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void setFuelModelNumber(long fuelModelNumber);
};

interface PalmettoGallberry {
  void PalmettoGallberry();
  void initializeMembers();
  double calculatePalmettoGallberyDeadFineFuelLoad(double ageOfRough, double heightOfUnderstory);
  double calculatePalmettoGallberyDeadFoliageLoad(double ageOfRough, double palmettoCoverage);
  double calculatePalmettoGallberyDeadMediumFuelLoad(double ageOfRough, double palmettoCoverage);
  double calculatePalmettoGallberyFuelBedDepth(double heightOfUnderstory);
  double calculatePalmettoGallberyLitterLoad(double ageOfRough, double overstoryBasalArea);
  double calculatePalmettoGallberyLiveFineFuelLoad(double ageOfRough, double heightOfUnderstory);
  double calculatePalmettoGallberyLiveFoliageLoad(double ageOfRough, double palmettoCoverage, double heightOfUnderstory);
  double calculatePalmettoGallberyLiveMediumFuelLoad(double ageOfRough, double heightOfUnderstory);
  double getHeatOfCombustionDead();
  double getHeatOfCombustionLive();
  double getMoistureOfExtinctionDead();
  double getPalmettoGallberyDeadFineFuelLoad();
  double getPalmettoGallberyDeadFoliageLoad();
  double getPalmettoGallberyDeadMediumFuelLoad();
  double getPalmettoGallberyFuelBedDepth();
  double getPalmettoGallberyLitterLoad();
  double getPalmettoGallberyLiveFineFuelLoad();
  double getPalmettoGallberyLiveFoliageLoad();
  double getPalmettoGallberyLiveMediumFuelLoad();
};

interface WesternAspen {
  void WesternAspen();
  void initializeMembers();
  double calculateAspenMortality(long severity, double flameLength, double DBH);
  double getAspenFuelBedDepth(long typeIndex);
  double getAspenHeatOfCombustionDead();
  double getAspenHeatOfCombustionLive();
  double getAspenLoadDeadOneHour();
  double getAspenLoadDeadTenHour();
  double getAspenLoadLiveHerbaceous();
  double getAspenLoadLiveWoody();
  double getAspenMoistureOfExtinctionDead();
  double getAspenMortality();
  double getAspenSavrDeadOneHour();
  double getAspenSavrDeadTenHour();
  double getAspenSavrLiveHerbaceous();
  double getAspenSavrLiveWoody();
};

/* Crown */

enum FireType_FireTypeEnum {
  "FireType::Surface",
  "FireType::Torching",
  "FireType::ConditionalCrownFire",
  "FireType::Crowning"
};

enum BeetleDamage {
  "BeetleDamage::not_set",
  "BeetleDamage::no",
  "BeetleDamage::yes"
};

enum CrownFireCalculationMethod {
  "CrownFireCalculationMethod::rothermel",
  "CrownFireCalculationMethod::scott_and_reinhardt"
};

enum CrownDamageEquationCode {
  "CrownDamageEquationCode::not_set",
  "CrownDamageEquationCode::white_fir",
  "CrownDamageEquationCode::subalpine_fir",
  "CrownDamageEquationCode::incense_cedar",
  "CrownDamageEquationCode::western_larch",
  "CrownDamageEquationCode::whitebark_pine",
  "CrownDamageEquationCode::engelmann_spruce",
  "CrownDamageEquationCode::sugar_pine",
  "CrownDamageEquationCode::red_fir",
  "CrownDamageEquationCode::ponderosa_pine",
  "CrownDamageEquationCode::ponderosa_kill",
  "CrownDamageEquationCode::douglas_fir"
};

enum CrownDamageType {
  "CrownDamageType::not_set",
  "CrownDamageType::crown_length",
  "CrownDamageType::crown_volume",
  "CrownDamageType::crown_kill"
};

enum EquationType {
  "EquationType::not_set",
  "EquationType::crown_scorch",
  "EquationType::bole_char",
  "EquationType::crown_damage"
};

enum FireSeverity {
  "FireSeverity::not_set",
  "FireSeverity::empty",
  "FireSeverity::low"
};

enum FlameLengthOrScorchHeightSwitch {
  "FlameLengthOrScorchHeightSwitch::flame_length",
  "FlameLengthOrScorchHeightSwitch::scorch_height"
};

enum GACC {
    "GACC::NotSet",
    "GACC::Alaska",
    "GACC::California",
    "GACC::EasternArea",
    "GACC::GreatBasin",
    "GACC::NorthernRockies",
    "GACC::Northwest",
    "GACC::RockeyMountain",
    "GACC::SouthernArea",
    "GACC::Southwest",
};

enum RequiredFieldNames {
  "RequiredFieldNames::region",
  "RequiredFieldNames::flame_length_or_scorch_height_switch",
  "RequiredFieldNames::flame_length_or_scorch_height_value",
  "RequiredFieldNames::equation_type",
  "RequiredFieldNames::dbh",
  "RequiredFieldNames::tree_height",
  "RequiredFieldNames::crown_ratio",
  "RequiredFieldNames::crown_damage",
  "RequiredFieldNames::cambium_kill_rating",
  "RequiredFieldNames::beetle_damage",
  "RequiredFieldNames::bole_char_height",
  "RequiredFieldNames::bark_thickness",
  "RequiredFieldNames::fire_severity",
  "RequiredFieldNames::num_inputs"
};

interface SIGCrown {
  void SIGCrown([Ref] SIGFuelModels fuelModels);
  FireType_FireTypeEnum getFireType();
  [Const] boolean getIsMoistureScenarioDefinedByIndex(long index);
  [Const] boolean getIsMoistureScenarioDefinedByName([Const] DOMString name);
  [Const] boolean isAllFuelLoadZero(long fuelModelNumber);
  [Const] boolean isFuelDynamic(long fuelModelNumber);
  [Const] boolean isFuelModelDefined(long fuelModelNumber);
  [Const] boolean isFuelModelReserved(long fuelModelNumber);
  boolean setCurrentMoistureScenarioByIndex(long moistureScenarioIndex);
  boolean setCurrentMoistureScenarioByName([Const] DOMString moistureScenarioName);
  [Const] double getAspect();
  [Const] double getCanopyBaseHeight(LengthUnits_LengthUnitsEnum canopyHeightUnits);
  [Const] double getCanopyBulkDensity(DensityUnits_DensityUnitsEnum canopyBulkDensityUnits);
  [Const] double getCanopyCover(FractionUnits_FractionUnitsEnum canopyFractionUnits);
  [Const] double getCanopyHeight(LengthUnits_LengthUnitsEnum canopyHeighUnits);
  [Const] double getCriticalOpenWindSpeed(SpeedUnits_SpeedUnitsEnum speedUnits);
  [Const] double getCrownCriticalFireSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getCrownCriticalSurfaceFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getCrownCriticalSurfaceFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getCrownFireActiveRatio();
  [Const] double getCrownFireArea(AreaUnits_AreaUnitsEnum areaUnits);
  [Const] double getCrownFirePerimeter(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getCrownTransitionRatio();
  [Const] double getCrownFireLengthToWidthRatio();
  [Const] double getCrownFireSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getCrownFireSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getCrownFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getCrownFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getCrownFractionBurned();
  [Const] double getCrownRatio(FractionUnits_FractionUnitsEnum crownRatioUnits);
  [Const] double getFinalFirelineIntesity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  [Const] double getFinalHeatPerUnitArea(HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum heatPerUnitAreaUnits);
  [Const] double getFinalSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getFinalSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFinalFireArea(AreaUnits_AreaUnitsEnum areaUnits);
  [Const] double getFinalFirePerimeter(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getFuelHeatOfCombustionDead(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getFuelHeatOfCombustionLive(long fuelModelNumber, HeatOfCombustionUnits_HeatOfCombustionUnitsEnum heatOfCombustionUnits);
  [Const] double getFuelLoadHundredHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadLiveHerbaceous(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadLiveWoody(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadOneHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelLoadTenHour(long fuelModelNumber, LoadingUnits_LoadingUnitsEnum loadingUnits);
  [Const] double getFuelMoistureOfExtinctionDead(long fuelModelNumber, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getFuelSavrLiveHerbaceous(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelSavrLiveWoody(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelSavrOneHour(long fuelModelNumber, SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum savrUnits);
  [Const] double getFuelbedDepth(long fuelModelNumber, LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getMoistureFoliar(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureHundredHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureLiveHerbaceous(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureLiveWoody(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureOneHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioHundredHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioHundredHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveHerbaceousByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveHerbaceousByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveWoodyByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioLiveWoodyByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioOneHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioOneHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioTenHourByIndex(long index, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureScenarioTenHourByName([Const] DOMString name, FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getMoistureTenHour(FractionUnits_FractionUnitsEnum moistureUnits);
  [Const] double getSlope(SlopeUnits_SlopeUnitsEnum slopeUnits);
  [Const] double getSurfaceFireSpreadDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  [Const] double getSurfaceFireSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  [Const] double getWindDirection();
  [Const] double getWindSpeed(SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  [Const] long getFuelModelNumber();
  [Const] long getMoistureScenarioIndexByName([Const] DOMString name);
  [Const] long getNumberOfMoistureScenarios();
  [Const] DOMString getFuelCode(long fuelModelNumber);
  [Const] DOMString getFuelName(long fuelModelNumber);
  [Const] DOMString getMoistureScenarioDescriptionByIndex(long index);
  [Const] DOMString getMoistureScenarioDescriptionByName([Const] DOMString name);
  [Const] DOMString getMoistureScenarioNameByIndex(long index);
  void doCrownRun();
  void doCrownRunRothermel();
  void doCrownRunScottAndReinhardt();
  void initializeMembers();
  void setAspect(double aspect);
  void setCanopyBaseHeight(double canopyBaseHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits);
  void setCanopyBulkDensity(double canopyBulkDensity, DensityUnits_DensityUnitsEnum densityUnits);
  void setCanopyCover(double canopyCover, FractionUnits_FractionUnitsEnum coverUnits);
  void setCanopyHeight(double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits);
  void setCrownRatio(double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void setFuelModelNumber(long fuelModelNumber);
  void setCrownFireCalculationMethod(CrownFireCalculationMethod CrownFireCalculationMethod);
  void setElapsedTime(double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  void setFuelModels([Ref] SIGFuelModels fuelModels);
  void setMoistureDeadAggregate(double moistureDead, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureFoliar(double foliarMoisture, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureHundredHour(double moistureHundredHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureInputMode(MoistureInputMode_MoistureInputModeEnum moistureInputMode);
  void setMoistureLiveAggregate(double moistureLive, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureLiveHerbaceous(double moistureLiveHerbaceous, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureLiveWoody(double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureOneHour(double moistureOneHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setMoistureScenarios([Ref] SIGMoistureScenarios moistureScenarios);
  void setMoistureTenHour(double moistureTenHour, FractionUnits_FractionUnitsEnum moistureUnits);
  void setSlope(double slope, SlopeUnits_SlopeUnitsEnum slopeUnits);
  void setUserProvidedWindAdjustmentFactor(double userProvidedWindAdjustmentFactor);
  void setWindAdjustmentFactorCalculationMethod(WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum windAdjustmentFactorCalculationMethod);
  void setWindAndSpreadOrientationMode(WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadAngleMode);
  void setWindDirection(double windDirection);
  void setWindHeightInputMode(WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setWindSpeed(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void updateCrownInputs(long fuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, double moistureFoliar, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum coverUnits, double canopyHeight, double canopyBaseHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits, double canopyBulkDensity, DensityUnits_DensityUnitsEnum densityUnits);
  void updateCrownsSurfaceInputs(long fuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, FractionUnits_FractionUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, FractionUnits_FractionUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  double getFinalFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
};

/* Mortality */

interface SpeciesMasterTableRecord {
  void SpeciesMasterTableRecord();
  void SpeciesMasterTableRecord([Const, Ref] SpeciesMasterTableRecord rhs);
};

interface SpeciesMasterTable {
  void SpeciesMasterTable();
  void initializeMasterTable();
  long getSpeciesTableIndexFromSpeciesCode(DOMString speciesCode);
  long getSpeciesTableIndexFromSpeciesCodeAndEquationType(DOMString speciesCode, EquationType equationType);
    void insertRecord(DOMString speciesCode,
                      DOMString scientificName,
                      DOMString commonName,
                      long  mortalityEquation,
                      long  brkEqu,
                      long  crownCoefficientCode,
                      long Alaska,
                      long California,
                      long EasternArea,
                      long GreatBasin,
                      long NorthernRockies,
                      long Northwest,
                      long RocketyMountain,
                      long SouthernArea,
                      long SouthWest,
                      EquationType equationType,
                      CrownDamageEquationCode crownDamageEquationCode);
};

interface SIGMortality {
  void SIGMortality([Ref] SpeciesMasterTable speciesMasterTable);
  void initializeMembers();

  boolean checkIsInGACCRegionAtSpeciesTableIndex(long index, GACC region);
  boolean checkIsInGACCRegionFromSpeciesCode(DOMString speciesCode, GACC region);
  boolean updateInputsForSpeciesCodeAndEquationType(DOMString speciesCode, EquationType equationType);
  double calculateMortality(FractionUnits_FractionUnitsEnum probablityUnits);
  double calculateScorchHeight(double firelineIntensity, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits, double midFlameWindSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, double airTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnits, LengthUnits_LengthUnitsEnum scorchHeightUnits);
  void calculateMortalityAllDirections(FractionUnits_FractionUnitsEnum probablityUnits);

  // Getters
  BoolVector getRequiredFieldVector();
  [Const] BeetleDamage getBeetleDamage();
  [Const] CrownDamageEquationCode getCrownDamageEquationCode();
  [Const] CrownDamageEquationCode getCrownDamageEquationCodeAtSpeciesTableIndex(long index);
  [Const] CrownDamageEquationCode getCrownDamageEquationCodeFromSpeciesCode(DOMString speciesCode);
  [Const] CrownDamageType getCrownDamageType();
  [Const] DOMString getCommonNameAtSpeciesTableIndex(long index);
  [Const] DOMString getCommonNameFromSpeciesCode(DOMString speciesCode);
  [Const] DOMString getScientificNameAtSpeciesTableIndex(long index);
  [Const] DOMString getScientificNameFromSpeciesCode(DOMString speciesCode);
  [Const] DOMString getSpeciesCode();
  [Const] DOMString getSpeciesCodeAtSpeciesTableIndex(long index);
  [Const] EquationType getEquationType();
  [Const] EquationType getEquationTypeAtSpeciesTableIndex(long index);
  [Const] EquationType getEquationTypeFromSpeciesCode(DOMString speciesCode);
  [Const] FireSeverity getFireSeverity();
  [Const] FlameLengthOrScorchHeightSwitch getFlameLengthOrScorchHeightSwitch();
  [Const] GACC getGACCRegion();
  [Const] SpeciesMasterTableRecordVector getSpeciesRecordVectorForGACCRegion(GACC region);
  [Const] SpeciesMasterTableRecordVector getSpeciesRecordVectorForGACCRegionAndEquationType(GACC region, EquationType equationType);
  [Const] double getBarkThickness(LengthUnits_LengthUnitsEnum barkThicknessUnits);
  [Const] double getBasalAreaKillled();
  [Const] double getBasalAreaPostfire();
  [Const] double getBasalAreaPrefire();
  [Const] double getBoleCharHeight(LengthUnits_LengthUnitsEnum boleCharHeightUnits);
  [Const] double getBoleCharHeightBacking(LengthUnits_LengthUnitsEnum boleCharHeightUnits);
  [Const] double getBoleCharHeightFlanking(LengthUnits_LengthUnitsEnum boleCharHeightUnits);
  [Const] double getCambiumKillRating();
  [Const] double getCrownDamage();
  [Const] double getCrownRatio(FractionUnits_FractionUnitsEnum crownRatioUnits);
  DOMString getCVSorCLS();
  [Const] double getDBH(LengthUnits_LengthUnitsEnum diameterUnits);
  [Const] double getFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  [Const] double getFlameLengthOrScorchHeightValue(LengthUnits_LengthUnitsEnum flameLengthOrScorchHeightUnits);
  [Const] double getKilledTrees();
  [Const] double getProbabilityOfMortality(FractionUnits_FractionUnitsEnum probabilityUnits);
  [Const] double getProbabilityOfMortalityBacking(FractionUnits_FractionUnitsEnum probabilityUnits);
  [Const] double getProbabilityOfMortalityFlanking(FractionUnits_FractionUnitsEnum probabilityUnits);
  [Const] double getScorchHeight(LengthUnits_LengthUnitsEnum scorchHeightUnits);
  [Const] double getScorchHeightBacking(LengthUnits_LengthUnitsEnum scorchHeightUnits);
  [Const] double getScorchHeightFlanking(LengthUnits_LengthUnitsEnum scorchHeightUnits);
  [Const] double getTotalPrefireTrees();
  [Const] double getTreeCrownLengthScorched(LengthUnits_LengthUnitsEnum treeCrownLengthScorchedUnits);
  [Const] double getTreeCrownLengthScorchedBacking(LengthUnits_LengthUnitsEnum treeCrownLengthScorchedUnits);
  [Const] double getTreeCrownLengthScorchedFlanking(LengthUnits_LengthUnitsEnum treeCrownLengthScorchedUnits);
  [Const] double getTreeCrownVolumeScorched(FractionUnits_FractionUnitsEnum getTreeCrownVolumeScorchedUnits);
  [Const] double getTreeCrownVolumeScorchedBacking(FractionUnits_FractionUnitsEnum getTreeCrownVolumeScorchedUnits);
  [Const] double getTreeCrownVolumeScorchedFlanking(FractionUnits_FractionUnitsEnum getTreeCrownVolumeScorchedUnits);
  [Const] double getTreeDensityPerUnitArea(AreaUnits_AreaUnitsEnum areaUnits);
  [Const] double getTreeHeight(LengthUnits_LengthUnitsEnum treeHeightUnits);
  [Const] double postfireCanopyCover();
  [Const] double prefireCanopyCover();
  [Const] long getBarkEquationNumberAtSpeciesTableIndex(long index);
  [Const] long getBarkEquationNumberFromSpeciesCode(DOMString speciesCode);
  [Const] long getCrownCoefficientCodeAtSpeciesTableIndex(long index);
  [Const] long getCrownCoefficientCodeFromSpeciesCode(DOMString speciesCode);
  [Const] long getCrownScorchOrBoleCharEquationNumber();
  [Const] long getMortalityEquationNumberAtSpeciesTableIndex(long index);
  [Const] long getMortalityEquationNumberFromSpeciesCode(DOMString speciesCode);
  [Const] long getNumberOfRecordsInSpeciesTable();
  [Const] long getSpeciesTableIndexFromSpeciesCode(DOMString speciesNameCode);
  [Const] long getSpeciesTableIndexFromSpeciesCodeAndEquationType(DOMString speciesNameCode, EquationType equationType);

  // Setters
  void setAirTemperature(double airTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
  void setBeetleDamage(BeetleDamage beetleDamage);
  void setBoleCharHeight(double boleCharHeight, LengthUnits_LengthUnitsEnum boleCharHeightUnits);
  void setCambiumKillRating(double cambiumKillRating);
  void setCrownDamage(double crownDamage);
  void setCrownRatio(double crownRatio, FractionUnits_FractionUnitsEnum crownRatioUnits);
  void setDBH(double dbh, LengthUnits_LengthUnitsEnum diameterUnits);
  void setEquationType(EquationType equationType);
  void setFireSeverity(FireSeverity fireSeverity);
  void setFirelineIntensity(double firelineIntensity, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setFlameLength(double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void setFlameLengthOrScorchHeightSwitch(FlameLengthOrScorchHeightSwitch flameLengthOrScorchHeightSwitch);
  void setFlameLengthOrScorchHeightValue(double flameLengthOrScorchHeightValue, LengthUnits_LengthUnitsEnum flameLengthOrScorchHeightUnits);
  void setMidFlameWindSpeed(double midFlameWindSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void setGACCRegion(GACC region);
  void setScorchHeight(double scorchHeight, LengthUnits_LengthUnitsEnum scorchHeightUnits);
  void setSpeciesCode(DOMString speciesCode);
  void setSurfaceFireFirelineIntensity(double value, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setSurfaceFireFirelineIntensityBacking(double value, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setSurfaceFireFirelineIntensityFlanking(double value, FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setSurfaceFireFlameLength(double value, LengthUnits_LengthUnitsEnum lengthUnits);
  void setSurfaceFireFlameLengthBacking(double value, LengthUnits_LengthUnitsEnum lengthUnits);
  void setSurfaceFireFlameLengthFlanking(double value, LengthUnits_LengthUnitsEnum lengthUnits);
  void setSurfaceFireScorchHeight(double value, LengthUnits_LengthUnitsEnum lengthUnits);
  void setTreeDensityPerUnitArea(double numberOfTrees, AreaUnits_AreaUnitsEnum areaUnits);
  void setTreeHeight(double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits);
  void setUserProvidedWindAdjustmentFactor(double userProvidedWindAdjustmentFactor);
  void setWindHeightInputMode(WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setWindSpeed(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void setWindSpeedAndWindHeightInputMode(double windwindSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double userProvidedWindAdjustmentFactor);
};

interface WindSpeedUtility {
  void WindSpeedUtility();
  double windSpeedAtMidflame(double windSpeedAtTwentyFeet, double windAdjustmentFactor);
  double windSpeedAtTwentyFeetFromTenMeter(double windSpeedAtTenMeters);
};

enum FDFMToolAspectIndex_AspectIndexEnum {
  "FDFMToolAspectIndex::NORTH",
  "FDFMToolAspectIndex::EAST",
  "FDFMToolAspectIndex::SOUTH",
  "FDFMToolAspectIndex::WEST"
};

enum FDFMToolDryBulbIndex_DryBulbIndexEnum {
  "FDFMToolDryBulbIndex::TEN_TO_TWENTY_NINE_DEGREES_F",
  "FDFMToolDryBulbIndex::THRITY_TO_FOURTY_NINE_DEGREES_F",
  "FDFMToolDryBulbIndex::FIFTY_TO_SIXTY_NINE_DEGREES_F",
  "FDFMToolDryBulbIndex::SEVENTY_TO_EIGHTY_NINE_DEGREES_F",
  "FDFMToolDryBulbIndex::NINETY_TO_ONE_HUNDRED_NINE_DEGREES_F",
  "FDFMToolDryBulbIndex::GREATER_THAN_ONE_HUNDRED_NINE_DEGREES_F"
};

enum FDFMToolElevationIndex_ElevationIndexEnum {
  "FDFMToolElevationIndex::BELOW_1000_TO_2000_FT",
  "FDFMToolElevationIndex::LEVEL_WITHIN_1000_FT",
  "FDFMToolElevationIndex::ABOVE_1000_TO_2000_FT"
};

enum FDFMToolMonthIndex_MonthIndexEnum {
  "FDFMToolMonthIndex::MAY_JUNE_JULY",
  "FDFMToolMonthIndex::FEB_MAR_APR_AUG_SEP_OCT",
  "FDFMToolMonthIndex::NOV_DEC_JAN"
};

enum FDFMToolRHIndex_RHIndexEnum {
  "FDFMToolRHIndex::ZERO_TO_FOUR_PERCENT",
  "FDFMToolRHIndex::FIVE_TO_NINE_PERCENT",
  "FDFMToolRHIndex::TEN_TO_FOURTEEN_PERCENT",
  "FDFMToolRHIndex::FIFTEEN_TO_NINETEEN_PERCENT",
  "FDFMToolRHIndex::TWENTY_TO_TWENTY_FOUR_PERCENT",
  "FDFMToolRHIndex::TWENTY_FIVE_TO_TWENTY_NINE_PERCENT",
  "FDFMToolRHIndex::THIRTY_TO_THIRTY_FOUR_PERCENT",
  "FDFMToolRHIndex::THIRTY_FIVE_TO_THIRTY_NINE_PERCENT",
  "FDFMToolRHIndex::FORTY_TO_FORTY_FOUR_PERCENT",
  "FDFMToolRHIndex::FORTY_FIVE_TO_FORTY_NINE_PERCENT",
  "FDFMToolRHIndex::FIFTY_TO_FIFTY_FOUR_PERCENT",
  "FDFMToolRHIndex::FIFTY_FIVE_TO_FIFTY_NINE_PERCENT",
  "FDFMToolRHIndex::SIXTY_TO_SIXTY_FOUR_PERCENT",
  "FDFMToolRHIndex::SIXTY_FIVE_TO_SIXTY_NINE_PERCENT",
  "FDFMToolRHIndex::SEVENTY_TO_SEVENTY_FOUR_PERCENT",
  "FDFMToolRHIndex::SEVENTY_FIVE_TO_SEVENTY_NINE_PERCENT",
  "FDFMToolRHIndex::EIGHTY_TO_EIGHTY_FOUR_PERCENT",
  "FDFMToolRHIndex::EIGHTY_FIVE_TO_EIGHTY_NINE_PERCENT",
  "FDFMToolRHIndex::NINETY_TO_NINETY_FOUR_PERCENT",
  "FDFMToolRHIndex::NINETY_FIVE_TO_NINETY_NINE_PERCENT",
  "FDFMToolRHIndex::ONE_HUNDRED_PERCENT"
};

enum FDFMToolShadingIndex_ShadingIndexEnum {
  "FDFMToolShadingIndex::EXPOSED",
  "FDFMToolShadingIndex::SHADED"
};

enum FDFMToolSlopeIndex_SlopeIndexEnum {
  "FDFMToolSlopeIndex::ZERO_TO_THIRTY_PERCENT",
  "FDFMToolSlopeIndex::GREATER_THAN_OR_EQUAL_TO_THIRTY_ONE_PERCENT"
};

enum FDFMToolTimeOfDayIndex_TimeOfDayIndexEnum {
  "FDFMToolTimeOfDayIndex::EIGHT_HUNDRED_HOURS_TO_NINE_HUNDRED_FIFTY_NINE",
  "FDFMToolTimeOfDayIndex::TEN_HUNDRED_HOURS_TO_ELEVEN__HUNDRED_FIFTY_NINE",
  "FDFMToolTimeOfDayIndex::TWELVE_HUNDRED_HOURS_TO_THIRTEEN_HUNDRED_FIFTY_NINE",
  "FDFMToolTimeOfDayIndex::FOURTEEN_HUNDRED_HOURS_TO_FIFTEEN_HUNDRED_FIFTY_NINE",
  "FDFMToolTimeOfDayIndex::SIXTEEN_HUNDRED_HOURS_TO_SIXTEEN_HUNDRED_FIFTY_NINE",
  "FDFMToolTimeOfDayIndex::EIGHTTEEN_HUNDRED_HOURS_TO_SUNSET"
};

interface SIGFineDeadFuelMoistureTool {
  void SIGFineDeadFuelMoistureTool();
  void calculate();
  void setTimeOfDayIndex(FDFMToolTimeOfDayIndex_TimeOfDayIndexEnum timeOfDayIndex);
  void setSlopeIndex(FDFMToolSlopeIndex_SlopeIndexEnum slopeIndex);
  void setShadingIndex(FDFMToolShadingIndex_ShadingIndexEnum shadingIndex);
  void setAspectIndex(FDFMToolAspectIndex_AspectIndexEnum aspectIndex);
  void setRHIndex(FDFMToolRHIndex_RHIndexEnum relativeHumidityIndex);
  void setElevationIndex(FDFMToolElevationIndex_ElevationIndexEnum elevationIndex);
  void setDryBulbIndex(FDFMToolDryBulbIndex_DryBulbIndexEnum dryBulbIndex);
  void setMonthIndex(FDFMToolMonthIndex_MonthIndexEnum monthIndex);
  double getFineDeadFuelMoisture(FractionUnits_FractionUnitsEnum desiredUnits);
  long getSlopeIndexSize();
  long getElevationIndexSize();
  long getMonthIndexSize();
  long getDryBulbTemperatureIndexSize();
  double getReferenceMoisture(FractionUnits_FractionUnitsEnum desiredUnits);
  void calculateByIndex(long aspectIndex, long dryBulbIndex, long elevationIndex, long monthIndex, long relativeHumidityIndex, long shadingIndex, long slopeIndex, long timeOfDayIndex);
  long getTimeOfDayIndexSize();
  double getCorrectionMoisture(FractionUnits_FractionUnitsEnum desiredUnits);
  long getAspectIndexSize();
  long getShadingIndexSize();
  long getRelativeHumidityIndexSize();
};

enum RepresentativeFraction_RepresentativeFractionEnum {
  "RepresentativeFraction::NINTEEN_HUNDRED_EIGHTY",
  "RepresentativeFraction::THREE_THOUSAND_NINEHUNDRED_SIXTY",
  "RepresentativeFraction::SEVEN_THOUSAND_NINEHUNDRED_TWENTY",
  "RepresentativeFraction::TEN_THOUSAND",
  "RepresentativeFraction::FIFTEEN_THOUSAND_EIGHT_HUNDRED_FORTY",
  "RepresentativeFraction::TWENTY_ONE_THOUSAND_ONE_HUNDRED_TWENTY",
  "RepresentativeFraction::TWENTY_FOUR_THOUSAND",
  "RepresentativeFraction::THRITY_ONE_THOUSAND_SIX_HUNDRED_EIGHTY",
  "RepresentativeFraction::FIFTY_THOUSAND",
  "RepresentativeFraction::SIXTY_TWO_THOUSAND_FIVE_HUNDRED",
  "RepresentativeFraction::SIXTY_THREE_THOUSAND_THREE_HUNDRED_SIXTY",
  "RepresentativeFraction::ONE_HUNDRED_THOUSAND",
  "RepresentativeFraction::ONE_HUNDRED_TWENTY_SIX_THOUSAND_SEVEN_HUNDRED_TWENTY",
  "RepresentativeFraction::TWO_HUNDRED_FIFTY_THOUSAND",
  "RepresentativeFraction::TWO_HUNDRED_FIFTY_THREE_THOUSAND_FOUR_HUNDRED_FORTY",
  "RepresentativeFraction::FIVE_HUNDRED_SIX_THOUSAND_EIGHT_HUNDRED_EIGHTY",
  "RepresentativeFraction::ONE_MILLION",
  "RepresentativeFraction::ONE_MILLION_THIRTEEN_THOUSAND_SEVEN_HUNDRED_SIXTY",
};

enum HorizontalDistanceIndex_HorizontalDistanceIndexEnum {
  "HorizontalDistanceIndex::UPSLOPE_ZERO_DEGREES",
  "HorizontalDistanceIndex::FIFTEEN_DEGREES_FROM_UPSLOPE",
  "HorizontalDistanceIndex::THIRTY_DEGREES_FROM_UPSLOPE",
  "HorizontalDistanceIndex::FORTY_FIVE_DEGREES_FROM_UPSLOPE",
  "HorizontalDistanceIndex::SIXTY_DEGREES_FROM_UPSLOPE",
  "HorizontalDistanceIndex::SEVENTY_FIVE_DEGREES_FROM_UPSLOPE",
  "HorizontalDistanceIndex::CROSS_SLOPE_NINETY_DEGREES"
};

interface SIGSlopeTool {
  void SIGSlopeTool();
  double getCentimetersPerKilometerAtIndex(long index);
  double getCentimetersPerKilometerAtRepresentativeFraction(RepresentativeFraction_RepresentativeFractionEnum representativeFraction);
  double getHorizontalDistance(HorizontalDistanceIndex_HorizontalDistanceIndexEnum horizontalDistanceIndex, LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceAtIndex(long index, LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceFifteen(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceFourtyFive(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceMaxSlope(SlopeUnits_SlopeUnitsEnum slopeUnits);
  double getHorizontalDistanceNinety(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceSeventy(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceSixty(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceThirty(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getHorizontalDistanceZero(LengthUnits_LengthUnitsEnum mapDistanceUnits);
  double getInchesPerMileAtIndex(long index);
  double getInchesPerMileAtRepresentativeFraction(RepresentativeFraction_RepresentativeFractionEnum representativeFraction);
  double getKilometersPerCentimeterAtIndex(long index);
  double getKilometersPerCentimeterAtRepresentativeFraction(RepresentativeFraction_RepresentativeFractionEnum representativeFraction);
  double getMilesPerInchAtIndex(long index);
  double getMilesPerInchAtRepresentativeFraction(RepresentativeFraction_RepresentativeFractionEnum representativeFraction);
  double getSlopeElevationChangeFromMapMeasurements(LengthUnits_LengthUnitsEnum elevationUnits);
  double getSlopeFromMapMeasurements(SlopeUnits_SlopeUnitsEnum slopeUnits);
  double getSlopeHorizontalDistanceFromMapMeasurements(LengthUnits_LengthUnitsEnum distanceUnits);
  double getSlopeFromMapMeasurementsInDegrees();
  double getSlopeFromMapMeasurementsInPercent();
  long getNumberOfHorizontalDistances();
  long getNumberOfRepresentativeFractions();
  long getRepresentativeFractionAtIndex(long index);
  long getRepresentativeFractionAtRepresentativeFraction(RepresentativeFraction_RepresentativeFractionEnum representativeFraction);
  void calculateHorizontalDistance();
  void calculateSlopeFromMapMeasurements();
  void setCalculatedMapDistance(double calculatedMapDistance, LengthUnits_LengthUnitsEnum distanceUnits);
  void setContourInterval(double contourInterval, LengthUnits_LengthUnitsEnum contourUnits);
  void setMapDistance(double mapDistance, LengthUnits_LengthUnitsEnum distanceUnits);
  void setMapRepresentativeFraction(long mapRepresentativeFraction);
  void setMaxSlopeSteepness(double maxSlopeSteepness);
  void setNumberOfContours(double numberOfContours);
};

interface VaporPressureDeficitCalculator {
  void VaporPressureDeficitCalculator();
  void runCalculation();
  void setTemperature(double temperature, TemperatureUnits_TemperatureUnitsEnum units);
  void setRelativeHumidity(double relativeHumidity, FractionUnits_FractionUnitsEnum units);
  double getVaporPressureDeficit(PressureUnits_PressureUnitsEnum units);
};

interface RelativeHumidityTool {
  void RelativeHumidityTool();

  // Calculate
  void calculate();

  // Getters
  double getDryBulbTemperature(TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
  double getSiteElevation(LengthUnits_LengthUnitsEnum lengthUnits);
  double getWetBulbTemperature(TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
  double getDewPointTemperature(TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
  double getRelativeHumidity(FractionUnits_FractionUnitsEnum fractionUnits);
  double getWetBulbDepression(TemperatureUnits_TemperatureUnitsEnum temperatureUnits);

  // Setters
  void setDryBulbTemperature(double dryBulbTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
  void setSiteElevation(double siteElevation, LengthUnits_LengthUnitsEnum lengthUnits);
  void setWetBulbTemperature(double wetBulbTemperature, TemperatureUnits_TemperatureUnitsEnum temperatureUnits);
};

enum BurningCondition_BurningConditionEnum {
  "BurningCondition::Low",
  "BurningCondition::Moderate",
  "BurningCondition::Extreme"
};

enum SlopeClass_SlopeClassEnum {
  "SlopeClass::Flat",
  "SlopeClass::Moderate",
  "SlopeClass::Steep"
};

enum SpeedClass_SpeedClassEnum {
  "SpeedClass::Light",
  "SpeedClass::Moderate",
  "SpeedClass::High"
};

enum SafetyCondition_SafetyConditionEnum {
  "SafetyCondition::Low",
  "SafetyCondition::Moderate",
  "SafetyCondition::Extreme"
};

interface SafeSeparationDistanceCalculator {

  // Calculate
  void calculate();
  BurningCondition_BurningConditionEnum getBurningCondition();
  SlopeClass_SlopeClassEnum getSlopeClass();
  SpeedClass_SpeedClassEnum getSpeedClass();

  double getSafeSeparationDistance(LengthUnits_LengthUnitsEnum lengthUnits);
  double getSafetyZoneSite(AreaUnits_AreaUnitsEnum areaUnits);
  double getVegetationHeight(LengthUnits_LengthUnitsEnum lengthUnits);

  void setBurningCondition(BurningCondition_BurningConditionEnum condition);
  void setSlopeClass(SlopeClass_SlopeClassEnum slope);
  void setSpeedClass(SpeedClass_SpeedClassEnum speed);
  void setVegetationHeight(double height, LengthUnits_LengthUnitsEnum lengthUnits);
}
